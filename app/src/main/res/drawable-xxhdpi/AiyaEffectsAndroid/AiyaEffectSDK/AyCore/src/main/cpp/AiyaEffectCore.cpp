//
// Created by aiya on 2017/8/12.
//

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <assert.h>
#include "Log.h"
#include "NdkTools.h"
#include <vector>
#include <Observer.h>
#include "AyCoreAuth.h"


#define AYEFFECTS_JAVA "com/aiyaapp/aiya/AiyaEffects"
#define TRACK_VERSION_CODE 4002
#define TRACK_VERSION_NAME "v4.0.02"

#ifdef __cplusplus
extern "C" {
#endif

static Observer observer;
static jobject javaListener;
static JavaVM * jvm;
static jmethodID eventMethodId;
static bool isJavaListenerChanged= false;

static bool isInit=false;

//由底层动态库回调
void observerMessage(int type,int ret,const char * info){
    Log::d("initLiscense : %d %d %s",type, ret, info);
    if(javaListener!= nullptr){
        JNIEnv * env;
        jvm->AttachCurrentThread(&env,NULL);
        if(isJavaListenerChanged&&env){
            jclass clazz=env->GetObjectClass(javaListener);
            eventMethodId=env->GetMethodID(clazz,"onEvent","(IILjava/lang/String;)I");
            isJavaListenerChanged= false;
        }
        jint method=env->CallIntMethod(javaListener,eventMethodId,type,ret,env->NewStringUTF(info));
        if(method==-1){
            if(type==ObserverMsg::MSG_STAT_LOOP_EXIT){
                if(javaListener!= nullptr){
                    jvm->DetachCurrentThread();
                }
            }
            return;
        }
    }

    if(type==ObserverMsg::MSG_STAT_LOOP_EXIT){
        if(javaListener!= nullptr){
            jvm->DetachCurrentThread();
        }
    }
}

//初始化接口
jint ayInit(JNIEnv * env, jclass clazz, jobject context,jstring appKey){
    if(isInit){
        isInit= false;
        AyCore_Release();
    }
    isInit=true;
    observer.message=observerMessage;
    observer.message(ObserverMsg::MSG_TYPE_INIT,0,"init callback xxx");

    char *_appKey= (char *) env->GetStringUTFChars(appKey, JNI_FALSE);

    AyCore_Auth2(env, context, _appKey, &observer);

    return 0;
}

//注销接口
void ayDeInit(JNIEnv * env,jclass clazz){
    AyCore_Release();
}

//设置事件监听器，监听器在observerMessage被调用，将回调传递给Java层
void aySetEventListener(JNIEnv * env,jclass clazz,jobject listener){
    javaListener=env->NewGlobalRef(listener);
    isJavaListenerChanged=true;
}

static JNINativeMethod g_methods[]={
        {"_init",                 "(Landroid/content/Context;Ljava/lang/String;)I", (void *)ayInit},
        {"_deInit" ,               "()V",                                            (void *)ayDeInit},
        {"_setEventListener",      "(Lcom/aiyaapp/aiya/IEventListener;)V",           (void *)aySetEventListener},
};

JNIEXPORT jint JNI_OnLoad(JavaVM *vm, void *reserved)
{
    jvm=vm;
    JNIEnv* env = nullptr;

    if (vm->GetEnv((void**)&env, JNI_VERSION_1_4) != JNI_OK) {
        return JNI_ERR;
    }
    assert(env != nullptr);
    jclass clazz=env->FindClass(AYEFFECTS_JAVA);
    env->RegisterNatives(clazz, g_methods, (int) (sizeof(g_methods) / sizeof((g_methods)[0])));

    return JNI_VERSION_1_4;
}

JNIEXPORT void JNI_OnUnload(JavaVM *jvm, void *reserved){
    //todo try ayDeInit here
}

#ifdef __cplusplus
}
#endif
