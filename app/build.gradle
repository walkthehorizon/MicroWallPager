apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.mob.sdk'
apply plugin: 'io.fabric'
apply plugin: 'com.google.firebase.firebase-perf'

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    useLibrary 'org.apache.http.legacy'

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.shentu.wallpaper"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner rootProject.ext.dependencies["androidJUnitRunner"]
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled = true

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }
    signingConfigs {
        release {
            storeFile file("../extras/micro.jks")
            keyAlias 'micro'
            keyPassword '911019'
            storePassword '911019'
        }
    }
    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "boolean", "USE_CANARY", "false"
            buildConfigField "String", "Sever", '"http://192.168.10.122/micro/"'
//            buildConfigField "String", "Sever", '"http://api.wmmt119.top/micro/"'
            buildConfigField "boolean", "Debug", "true"
            minifyEnabled false
            signingConfig signingConfigs.release
        }

        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "boolean", "USE_CANARY", "false"
            buildConfigField "String", "Sever", '"http://api.wmmt119.top/micro/"'
            buildConfigField "boolean", "Debug", "false"
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "${rootProject.name}_${buildType.name}_${defaultConfig.versionName}_${new Date().format("yyMMdd", TimeZone.getTimeZone("UTC"))}" + ".apk"
        }
    }

    lintOptions {
        disable 'InvalidPackage'
        disable "ResourceType"
        abortOnError false
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['jniLibs']
        }
    }

    dexOptions {
        preDexLibraries true
        maxProcessCount 8
        javaMaxHeapSize "4G"
    }
}

MobSDK {
    appKey "2726f3a69c300"
    appSecret "5ef67a98fcae47f91163577728158ac3"

    SMSSDK {
        gui false
    }
    MobLink {
        uriScheme "mlink://com.shentu.wallpaper"
        appLinkHost "9mo0.t4m.cn"
    }
    ShareSDK {
        //平台配置信息
        devInfo {
            WechatMoments {
                appId "wx0297c301e792e1d3"
                appSecret "82ca4da77bbe554a14fefd70b3f24c7e"
            }
            Wechat {
                appId "wx0297c301e792e1d3"
                appSecret "82ca4da77bbe554a14fefd70b3f24c7e"
            }
            QQ {
                appId "1107764210"
                appKey "radHCb2FhkGLtIv4"
                shareByAppClient true
            }
        }
    }
}

kapt {
    generateStubs = true
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
        arg('eventBusIndex', 'com.shentu.wallpaper.app.MicroEventBusIndex')
    }
}

buildscript {
    repositories {
        jcenter()
    }
}


dependencies {
    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    api project(':arms')
//    implementation(rootProject.ext.dependencies["support-v4"])
//    implementation(rootProject.ext.dependencies["appcompat"])
    implementation(rootProject.ext.dependencies["recyclerview"])
//    implementation rootProject.ext.dependencies["annotation"]
    implementation rootProject.ext.dependencies["viewpager2"]
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //support
    implementation rootProject.ext.dependencies["agentweb"]
    implementation rootProject.ext.dependencies["constraint-layout"]
    implementation rootProject.ext.dependencies["vector-drawable"]
    implementation rootProject.ext.dependencies["multidex"]
    implementation rootProject.ext.dependencies["material"]
    implementation rootProject.ext.dependencies["lifecycle-extensions"]
    //tools
    implementation rootProject.ext.dependencies["progressmanager"]
    implementation rootProject.ext.dependencies["retrofit-url-manager"]
    implementation rootProject.ext.dependencies["lifecyclemodel"]
    implementation rootProject.ext.dependencies["logger"]
    implementation rootProject.ext.dependencies["utilcode"]
    implementation rootProject.ext.dependencies["glide-transformations"]
    implementation rootProject.ext.dependencies["glide"]
    implementation rootProject.ext.dependencies["okhttp3"]
    implementation rootProject.ext.dependencies["glide-loader-okhttp3"]
    kapt rootProject.ext.dependencies["glide-compiler"]
    implementation rootProject.ext.dependencies["glidepalette"]
    implementation rootProject.ext.dependencies["loadsir"]
    implementation rootProject.ext.dependencies["filedownloader"]
    implementation rootProject.ext.dependencies["matisse"]
    implementation rootProject.ext.dependencies["lottie"]
    kapt(rootProject.ext.dependencies["butterknife-compiler"]) {
        exclude module: 'support-annotations'
    }
    implementation rootProject.ext.dependencies["arouter"]
    kapt rootProject.ext.dependencies["arouter-compiler"]
    kapt rootProject.ext.dependencies["dagger2-compiler"]
    kapt rootProject.ext.dependencies["dagger2-android-processor"]
    implementation rootProject.ext.dependencies["eventbus"]
    kapt rootProject.ext.dependencies["eventbus-processor"]
    implementation rootProject.ext.dependencies['AndPermission']
    //view
    implementation rootProject.ext.dependencies["BRVAdapterHelper"]
    implementation rootProject.ext.dependencies["circleimageview"]
    implementation rootProject.ext.dependencies["SmartRefreshLayout"]
    implementation rootProject.ext.dependencies["SmartRefreshHeader"]
    implementation rootProject.ext.dependencies["photoview"]
    implementation rootProject.ext.dependencies["autosize"]
    //    implementation rootProject.ext.dependencies["material-dialogs"]
    implementation rootProject.ext.dependencies["mdialogs-core"]
    implementation rootProject.ext.dependencies["mdialogs:bottomsheets"]
    implementation rootProject.ext.dependencies["mdialogs-input"]
    implementation rootProject.ext.dependencies["flexbox"]
    implementation(rootProject.ext.dependencies["cosxml-lite"]) {
        exclude group: 'com.tencent.qcloud', module: 'mtaUtils' //关闭 mta上报功能
    }
    implementation rootProject.ext.dependencies["circleindicator"]
    implementation rootProject.ext.dependencies["firebase"]
    implementation rootProject.ext.dependencies["crashlytics"]
    implementation rootProject.ext.dependencies["firebase-perf"]

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.2'

    //bigImage
    implementation rootProject.ext.dependencies["bigImageViewer"]
    implementation 'com.github.piasy:GlideImageLoader:1.6.1'
    implementation rootProject.ext.dependencies["bigGifDrawable"]
    //test
    testImplementation rootProject.ext.dependencies["junit"]
    debugImplementation rootProject.ext.dependencies["canary-debug"]
    releaseImplementation rootProject.ext.dependencies["canary-release"]
    testImplementation rootProject.ext.dependencies["canary-release"]
}
apply plugin: 'com.google.gms.google-services'